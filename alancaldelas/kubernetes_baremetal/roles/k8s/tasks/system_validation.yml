---
- name: Validate min CPU requirement for Kubernetes
  assert:
    that:
      - ansible_processor_vcpus >= k8s_min_cpu_cores
    fail_msg: "System has {{ ansible_processor_vcpus }} CPU cores, but Kubernetes requires at least {{ k8s_min_cpu_cores }} cores"
    success_msg: "CPU requirement satisfied: {{ ansible_processor_vcpus }} cores available"

- name: Validate min memory requirements for Kubernetes
  assert:
    that:
      - ansible_memtotal_mb >= k8s_min_memory_mb
    fail_msg: "System has {{ ansible_memtotal_mb }}MB RAM, but Kubernetes requires at least {{ k8s_min_memory_mb }}MB"
    success_msg: "Memory requirement satisfied: {{ ansible_memtotal_mb }}MB available"

- name: Validate disk space
  assert:
    that:
      - item.size_available >= k8s_min_disk_space_gb * 1024 * 1024 * 1024
    fail_msg: "Insufficient disk space on {{ item.mount }}. Available: {{ (item.size_available / 1024 / 1024 / 1024) | round(1) }}GB, Required: {{ k8s_min_disk_space_gb }}GB"
    success_msg: "Disk space requirement satisfied on {{ item.mount }}: {{ (item.size_available / 1024 / 1024 / 1024) | round(1) }}GB available"
  with_items: "{{ ansible_mounts }}"
  when: item.mount in k8s_required_mount_points

- name: Check if required kernel modules are available
  shell: modinfo {{ item }}
  register: kernel_modules_check
  failed_when: false
  changed_when: false
  loop: "{{ k8s_required_kernel_modules }}"

- name: Validate kernel modules availability
  assert:
    that:
      - item.rc == 0
    fail_msg: "Required kernel module '{{ item.item }}' is not available"
    success_msg: "Kernel module '{{ item.item }}' is available"
  loop: "{{ kernel_modules_check.results }}"

- name: Check current kernel version
  command: uname -r
  register: kernel_version
  changed_when: false

- name: Validate minimum kernel version
  assert:
    that:
      - kernel_version.stdout is version(k8s_min_kernel_version, '>=')
    fail_msg: "Kernel version {{ kernel_version.stdout }} is too old. Minimum required: {{ k8s_min_kernel_version }}"
    success_msg: "Kernel version {{ kernel_version.stdout }} meets minimum requirements"

- name: Check if systemd is available and active
  systemd:
    name: systemd
  register: systemd_status
  failed_when: false

- name: Validate systemd availability
  assert:
    that:
      - systemd_status is not failed
    fail_msg: "systemd is not available or not running"
    success_msg: "systemd is available and running"

- name: Check network connectivity to required endpoints
  uri:
    url: "{{ item }}"
    method: HEAD
    timeout: 10
  register: connectivity_check
  failed_when: false
  changed_when: false
  loop: "{{ k8s_required_endpoints }}"
  when: k8s_check_network_connectivity | default(true)

- name: Validate network connectivity
  assert:
    that:
      - item.status == 200 or item.status == 301 or item.status == 302
    fail_msg: "Cannot reach required endpoint {{ item.item }}"
    success_msg: "Network connectivity to {{ item.item }} is working"
  loop: "{{ connectivity_check.results }}"
  when: 
    - k8s_check_network_connectivity | default(true)
    - connectivity_check.results is defined

# Container Runtime Validation
- name: Check for existing container runtime
  shell: |
    for cmd in containerd crio; do
      if command -v $cmd >/dev/null 2>&1; then
        echo $cmd
        exit 0
      fi
    done
    echo "none"
  register: existing_runtime
  changed_when: false

- name: Validate runtime compatibility
  assert:
    that:
      - existing_runtime.stdout == 'none' or existing_runtime.stdout == k8s_container_runtime
    fail_msg: >
      Found existing runtime '{{ existing_runtime.stdout }}' but configured for '{{ k8s_container_runtime }}'.
      Uninstall existing runtime or set k8s_manage_container_runtime=false
    success_msg: >
      {% if existing_runtime.stdout == 'none' %}
      No existing runtime found. Proceeding with installation of '{{ k8s_container_runtime }}'.
      {% else %}
      Found compatible runtime '{{ existing_runtime.stdout }}' matching configured '{{ k8s_container_runtime }}'.
      {% endif %}
  when: k8s_manage_container_runtime

- name: Set runtime facts for other tasks
  set_fact:
    k8s_existing_runtime: "{{ existing_runtime.stdout }}"
    k8s_runtime_needs_install: "{{ existing_runtime.stdout == 'none' }}"

- name: Check if ports are available
  wait_for:
    port: "{{ item }}"
    host: "{{ ansible_default_ipv4.address }}"
    timeout: 1
    state: stopped
  register: port_check
  failed_when: false
  changed_when: false
  loop: "{{ k8s_required_ports }}"

- name: Validate required ports are not in use
  assert:
    that:
      - item.elapsed < 1
    fail_msg: "Required port {{ item.item }} is already in use"
    success_msg: "Port {{ item.item }} is available"
  loop: "{{ port_check.results }}"

- name: Load required kernel modules
  modprobe:
    name: "{{ item }}"
    state: present
  loop: "{{ k8s_required_kernel_modules }}"

- name: Load nf_conntrack module (required for conntrack_max sysctl)
  modprobe:
    name: nf_conntrack
    state: present

- name: Ensure kernel modules are loaded at boot
  lineinfile:
    path: /etc/modules-load.d/kubernetes.conf
    line: "{{ item }}"
    create: yes
    mode: '0644'
  loop: "{{ k8s_required_kernel_modules }}"

- name: Set kernel parameters for Kubernetes
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    reload: yes
    sysctl_set: yes
  loop: "{{ k8s_kernel_parameters }}"

- name: Install required packages for Kubernetes
  package:
    name: "{{ k8s_required_packages }}"
    state: present
  when: k8s_required_packages is defined

- name: Install required packages for Kubernetes (Debian/Ubuntu)
  package:
    name: "{{ k8s_required_packages_debian }}"
    state: present
  when: 
    - ansible_os_family == "Debian"
    - k8s_required_packages_debian is defined

- name: Install required packages for Kubernetes (RHEL/CentOS)
  package:
    name: "{{ k8s_required_packages_rhel }}"
    state: present
  when: 
    - ansible_os_family == "RedHat"
    - k8s_required_packages_rhel is defined

- name: Configure SELinux state
  selinux:
    state: "{{ k8s_selinux_state }}"
    policy: "{{ k8s_selinux_policy }}"
  when: 
    - ansible_selinux is defined
    - k8s_selinux_state != "current"
    - (ansible_selinux.status != k8s_selinux_state or (k8s_selinux_state == "enforcing" and ansible_selinux.mode != "enforcing"))
  notify: reboot system

- name: Install SELinux policy packages for Kubernetes (RHEL/CentOS)
  package:
    name: "{{ k8s_selinux_packages_rhel }}"
    state: present
  when:
    - ansible_os_family == "RedHat"
    - k8s_selinux_state in ["enforcing", "permissive"]
    - k8s_selinux_packages_rhel is defined

- name: Configure SELinux booleans for Kubernetes
  seboolean:
    name: "{{ item.name }}"
    state: "{{ item.state }}"
    persistent: yes
  loop: "{{ k8s_selinux_booleans }}"
  when:
    - ansible_selinux is defined
    - k8s_selinux_state in ["enforcing", "permissive"]
    - k8s_selinux_booleans is defined

- name: Disable firewall (if configured)
  systemd:
    name: "{{ item }}"
    state: stopped
    enabled: no
  failed_when: false
  loop:
    - firewalld
    - ufw
  when: k8s_disable_firewall | default(false)

- name: Check if swap is enabled
  command: swapon --show
  register: swap_status
  changed_when: false
  failed_when: false

- name: Validate swap is disabled
  assert:
    that:
      - swap_status.stdout == ""
    fail_msg: "Swap is enabled. Kubernetes requires swap to be disabled"
    success_msg: "Swap is properly disabled"